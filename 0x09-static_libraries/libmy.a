!<arch>
0-isupper.c/    0           0     0     644     205       `
#include "main.h"

/**
* _isupper - Checks for uppercase character
*
* @c: parameter
*
* Return: 0 or 1
*/

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     335       `
#include "main.h"

/**
* _memset - Function that fills memory with a constant byte
*
* @s: pointer to memory area
* @b: character constant
* @n: number of bytes of memory area to be filled
*
* Return: pointer s
*/

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}

0-strcat.c/     0           0     0     644     321       `
#include "main.h"

/**
* _strcat - Concatenates two strings
*
* @dest: first member
* @src: second member
*
* Return: char
*/

char *_strcat(char *dest, char *src)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
		;
	for (j = 0; src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		i++;
	}

	dest[i] = '\0';

	return (dest);
}

1-isdigit.c/    0           0     0     644     321       `
#include "main.h"

/**
* _isdigit - Checks if argument is digit between zero and nine
*
* Description: The fuction checks if c is a digit between 0 and 9
* @c: parameter
*
* Return: 0 or 1 Always
*/

int _isdigit(int c)
{
	if ((c >= 0 && c <= 9) || (c >= '0' && c <= '9'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     333       `
#include "main.h"

/**
* _memcpy - copy selected memory area (src) to destination (dest)
*
* @dest: destination memory
* @src: source memory
* @n: selected bytes to be copied
*
* Return: dest
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

	return (dest);
}

1-strncat.c/    0           0     0     644     361       `
#include "main.h"

/**
* _strncat - concatenate tow string. Use at most n bytes from src
*
* @dest: destination
* @src: source
* @n: number of bytes
*
* Return: char
*/

char *_strncat(char *dest, char *src, int n)
{
	int i = 0, j;

	while (dest[i] != '\0')
		i++;
	for (j = 0; j < n && src[j] != '\0'; j++)
	{
		dest[i] = src[j];
		i++;
	}


	return (dest);
}

100-atoi.c/     0           0     0     644     374       `
#include "main.h"

/**
* _atoi - Converts a string to an integer
*
* @s: Parameter
*
* Return: 0 on success
*/

int _atoi(char *s)
{
	int sign = 1;
	unsigned int number = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
		{
			number = (number * 10) + (*s - '0');
		}
		else if (number > 0)
			break;
	} while (*s++);

	return (number * sign);
}
2-strchr.c/     0           0     0     644     313       `
#include "main.h"

/**
* _strchr - Function that locates character in a string
*
* @s: string
* @c: character to be located
*
* Return: pointer to character or NULL
*/

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}

	}

	return ('\0');
}

2-strlen.c/     0           0     0     644     207       `
#include "main.h"

/**
* _strlen - Returns the length of a string
*
* @s: parameter
*
* Return: integer on success
*/

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return  (i);
}

2-strncpy.c/    0           0     0     644     320       `
#include "main.h"

/**
* _strncpy - copies a string
*
* @dest: first member
* @src: second member
* @n: third member
*
* Return: char
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for (; n > i; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.c/    0           0     0     644     200       `
#include "main.h"

/**
* _islower - Checks for lowercase character
*
* @c:first value
*
* Return: On success 1
*/

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}

	return (0);
}
3-puts.c/       0           0     0     644     240       `
#include "main.h"

/**
* _puts - Prints a string, followed by a new line
*
* @str: parameter
*
* Return: void
*/

void _puts(char *str)
{
	int v, i = 0;

	while (str[i] != '\0')
	{
		v = str[i];
		_putchar(v);
		i++;
	}

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     287       `
#include "main.h"

/**
* _strcmp - compares two strings
*
* @s1: first member
* @s2: second member
*
* Return: integer
*/

int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}

	return (0);
}

3-strspn.c/     0           0     0     644     362       `
#include "main.h"

/**
* _strspn - gets the length of a prefix substring
*
* @s: string
* @accept: second string
*
* Return: int
*/

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, count;

	count = 0;

	for (i = 0; s[i] != ' '; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (accept[j] == s[i])
				count++;
		}
	}

	return (count);
}
4-isalpha.c/    0           0     0     644     232       `
#include "main.h"

/**
* _isalpha - Checks for alphabetic characters
*
* @c: first value
*
* Return: On success  1
*/

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     387       `
#include "main.h"

/**
* _strpbrk - searches a string for any of a set of bytes
*
* @s: first string
* @accept: second string
*
* Return: char or null
*/

char *_strpbrk(char *s, char *accept)
{
	int i, j;
	char *p;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (accept[j] == s[i])
			{
				p = &s[i];
				return (p);
			}
		}
	}

	return ('\0');
}

5-strstr.c/     0           0     0     644     571       `
#include "main.h"

/**
* _strstr - Locates a substring
*
* @haystack: Primary string
* @needle: Secondary string
*
* Return: Char
*/

char *_strstr(char *haystack, char *needle)
{
	int i, j, k;
	int c = 0, a = 1;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i] == needle[j])
			{
				for (k = j; needle[k] >= '\0'; k++)
				{
					if (needle[k + a] == haystack[i + a])
					{
						c++;
						a++;
					}
					if (needle[k] == '\0')
						return (&haystack[i]);
					continue;
				}

			}
		}
	}

	return ('\0');
}

6-abs.c/        0           0     0     644     193       `
#include "main.h"

/**
* _abs - Computes the absolute value of an integer
*
* @n: arguement
*
* Return: On success integer
*/

int _abs(int n)
{
	if (n < 0)
	{
		n = n * -1;
	}

	return (n);
}

9-strcpy.c/     0           0     0     644     289       `
#include "main.h"

/**
* _strcpy - copies the string pointed to by src
*
* @dest: first parameter
* @src: second parameter
*
* Return: void
*/

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

